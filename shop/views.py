from django.shortcuts import render, get_object_or_404, redirect
from .models import Category, Product, Order, OrderItem, Cart, CartItem
from .forms import OrderForm
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from decimal import Decimal
import requests
import os


def home(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–¥–∏—Ç–µ—Ä–µ"""
    return render(request, "shop/home.html")


@login_required
def order_list(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    orders = Order.objects.all()
    return render(request, "shop/order_list.html", {"orders": orders})


def product_list(request, category_slug=None):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    category = None
    categories = Category.objects.all()
    products = Product.objects.all()

    if category_slug:
        category = get_object_or_404(Category, slug=category_slug)
        products = products.filter(category=category)

    return render(
        request,
        "shop/product_list.html",
        {
            "category": category,
            "categories": categories,
            "products": products,
        },
    )


def product_detail(request, product_slug):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞"""
    product = get_object_or_404(Product, slug=product_slug)
    return render(request, "shop/product_detail.html", {"product": product})


### üîπ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")


def send_telegram_message(order):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    items = order.items.all()
    items_text = "\n".join([f"{item.product.name} x{item.quantity}" for item in items])

    message = (
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{items_text}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {order.customer_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: {order.get_messenger_display()} ({order.messenger_contact})\n"
        f"–î–∞—Ç–∞: {order.order_date}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}"
    )

    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
        data={"chat_id": TELEGRAM_CHAT_ID, "text": message},
    )


### üîπ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã


def get_cart(request):
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    session_key = request.session.session_key
    if not session_key:
        request.session.create()
        session_key = request.session.session_key

    cart, created = Cart.objects.get_or_create(session_key=session_key)
    return cart


def cart_add(request, product_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (—Å AJAX-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º)"""
    product = get_object_or_404(Product, id=product_id)
    cart = get_cart(request)

    quantity = int(request.POST.get("quantity", product.min_order_quantity))

    cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product)
    if created:
        cart_item.quantity = quantity
    else:
        cart_item.quantity += quantity

    cart_item.save()

    return JsonResponse(
        {"status": "success", "message": f"‚úÖ {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"}
    )


def cart_update(request, product_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    product = get_object_or_404(Product, id=product_id)
    cart = get_cart(request)

    try:
        cart_item = CartItem.objects.get(cart=cart, product=product)
        quantity = int(
            request.POST.get("quantity", cart_item.product.min_order_quantity)
        )

        if quantity >= cart_item.product.min_order_quantity:
            cart_item.quantity = quantity  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cart_item.save()

    except CartItem.DoesNotExist:
        pass  # –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    return redirect("cart_detail")  # ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã


def cart_remove(request, product_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_cart(request)
    cart_item = get_object_or_404(CartItem, cart=cart, product_id=product_id)
    cart_item.delete()

    return redirect("cart_detail")


def cart_detail(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_cart(request)
    cart_items = cart.items.all()

    total_price = Decimal("0.00")
    cart_data = []

    for item in cart_items:
        total_price_item = Decimal(item.quantity) * item.product.price
        total_price += total_price_item

        cart_data.append(
            {
                "product": item.product,
                "quantity": item.quantity,
                "total_price": total_price_item,
            }
        )

    return render(
        request,
        "shop/cart.html",
        {
            "cart_items": cart_data,
            "total_price": total_price,
        },
    )


### üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã


def order_create(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_cart(request)
    cart_items = cart.items.all()

    if not cart_items:
        return redirect("cart_detail")

    if request.method == "POST":
        form = OrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)  # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
            order.save()  # –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –µ—Å—Ç—å ID

            order_items = [
                OrderItem(order=order, product=item.product, quantity=item.quantity)
                for item in cart_items
            ]
            OrderItem.objects.bulk_create(order_items)  # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤

            cart.items.all().delete()  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É

            send_telegram_message(order)

            return render(request, "shop/order_success.html", {"order": order})

    else:
        form = OrderForm()

    return render(
        request, "shop/order_form.html", {"form": form, "cart_items": cart_items}
    )
